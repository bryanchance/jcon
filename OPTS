POSSIBLE OPTIMIZATIONS FOR JCON 2 
<<ARIZONA-ONLY>> 



In GC, combine var creation with assignment of parameter values.
Possibly create vValues instead of vSimpleVars if never altered.
If neither possible, set v.value field without calling Assign.

Recycle vSimpleVars, possibly taking advantage of stackwise usage
discipline.

Deref variable before calling v.Bang / Index / Section[+-]
if result is not used as variable.  For string values, this
prevents costly creation of vSubstring.

Take advantage of knowledge when a result value is unused, e.g.
"every 1 to 5 do..." need not create vIntegers.

Add second versions of many(), push(), etc. that are optimized for
the common cases that use default arguments.
	-- DONE for: any, many, upto, push, put, write, writes
	-- could also do: match, find, trim, log, atan
	-- lots more possibilities among the graphics functions

Use lazy creation for most keyword classes.
	-- nontrivial and probably not worth it

Make some methods final to allow inlining, e.g. vCset.member().
	-- DONE by making almost all classes final
	-- (some individual methods still are marked, too)

Cache a vNull locally instead of calling factory, e.g. in vSimpleVar.
Similarly cache vIntegers like 0 and 1 where used, and empty strings.
	-- DONE, where useful, mostly by ensuring inlining of methods
