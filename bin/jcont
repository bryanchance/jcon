#!/bin/ksh
#
#  jcont -- compile Icon program
#
#  usage:  jcont [-cdsvJP] [-o exe] file[.icn]... [file.zip...] [-x [arguments]]
#
#     -c	compile only: don't produce an executable
#     -s	silent: suppress commentary
#     -o exe	specify output file for executable
#
#     -x	execute after compilation
#
#  The following are mainly for debugging jcont:
#
#     -d	debug jcont: use ./jtmp for temp files, and don't delete
#     -v	verbose: echo shell commands, trace linking steps
#		    (this option is not for the squeamish)
#     -J	generate slower code in Java source form instead of writing
#		    class files directly; requires javac in search path
#     -P	pessimize: don't optimize the generated Java code
#
#  Jcont translates Icon source files into .zip files, and links .zip
#  files to make an excutable program.  Jcont is similar to icont in
#  concept and behavior; think of a .zip file as analagous to a .u1/.u2
#  pair from icont.
#
#  The following executables must be in the search path:
#	icont, java, zip, unzip 
#  (zip and unzip may be installed in the same directory as jcont.)

PREPROC="icont -s -E"
ZIP="zip"
UNZIP="unzip"
JAVAC="javac -nowarn"
JAVA="java"

export BLKSIZE=6000000
export STRSIZE=500000

#  save command line and user IPATH
#  (remove spaces from IPATH to work around SGI java bug in argument handling)
CMDLINE="$0 $*"
UIPATH=`echo "$IPATH" | tr ' ' ':'`

#  clear inherited environment variables
#  (but note that BLKSIZE and STRSIZE are set above)
unset ICONX ICONCORE TRACE IPATH LPATH NOERRBUF
unset HEAPSIZE COEXPSIZE MSTKSIZE QLSIZE

#  set tracing modes
ANNOUNCE=echo
CMDTRACE=
LINKTRACE=
JCOPT=-O
TARGET=bc

# set temporary directory name, and assume its deletion
TDIR=./jcon$$
NODELETE=

#  assume an executable script is created
XFILE=
NOLINK=

#  assume no subsequent execution
NOEXECUTE=exit

#  process options, changing devault values set above

USAGE="usage: $0 [-cdsvP] [-o exe] file[.icn]... [file.zip...] [-x [arguments]]"

while getopts "cdsvJPo:" c 2>/dev/null; do
    case $c in
	c)	NOLINK="exit";;
	d)	TDIR=./jtmp; NODELETE=":";;
	s)	ANNOUNCE=":";;
	v)	CMDTRACE="set -x"; LINKTRACE="-t";;
	J)	TARGET="java";;
	P)	JCOPT="";;
	o)	XFILE="$OPTARG";;
    	\?)	echo 1>&2 $USAGE; exit 1;;
    esac
done

#  check that at least one file argument was given
shift `expr $OPTIND - 1`
if [ $# = 0 ]; then
    echo 1>&2 "$USAGE"
    exit 1
fi

#  set script file name
if [ "$XFILE" = "" ]; then
    XFILE="${1%.icn}"
    XFILE="${XFILE%.zip}"
fi

#  accumulate .icn and .zip file names
IFILES=
ZFILES=
ZBUILT=
ROOTS=
for FNAME; do
    case $FNAME in
	-x)	NOEXECUTE=
		shift
		break
		;;
	*.zip)	BASE=${FNAME%.zip}
		ZFILES="$ZFILES $BASE.zip"
		ROOTS="$ROOTS l\\\$$BASE"
		shift
		;;
	*)	BASE=${FNAME%.icn}
		IFILES="$IFILES $BASE"
		ZFILES="$ZFILES $BASE.zip"
		ZBUILT="$ZBUILT $BASE.zip"
		ROOTS="$ROOTS l\\\$$BASE"
		shift
		;;
    esac
done

#  determine installed directory
PRG=`whence $0`
IDIR=`dirname $PRG`
case $IDIR in 
    /*)	;;
    *)	IDIR=`pwd`;;
esac

#  set paths for translator and for runtime files
JTRAN="$IDIR/jtran $JCOPT -target=$TARGET"
JRTS="$IDIR/rts.zip"


# estimate the needed header size
HBASE=600		# approximate size of fixed text, plus breathing room
(( HDRSIZE = $HBASE + ${#CMDLINE} + ${#ROOTS} ))	# estimate total
(( HDRSIZE = (HDRSIZE + 15) & ~15 ))			# round to mult of 16

# conditionalize "Translating:" announcement
if [ "$IFILES" != "" ]; then
    TANNOUNCE="$ANNOUNCE"
else
    TANNOUNCE=":"
fi

#  arrange deletion of temporary directory, if NODELETE is not set
$NODELETE trap "rm -rf $TDIR" 0 1 2 15

#  now, finally, do some work
set -e
$CMDTRACE
export CLASSPATH="$JRTS"

# create temporary directory
if [ -d $TDIR ]; then
    rm -f $TDIR/*
else
    mkdir $TDIR
fi

# translate each .icn file in turn
$TANNOUNCE 1>&2 "Translating:"
ERREXIT=":"
for FNAME in $IFILES; do
    rm -f $TDIR/*.class
    # Icon to Java
    $ANNOUNCE 1>&2 $FNAME.icn:
    if ($PREPROC $FNAME.icn || echo nosuchfile) | 
		$JTRAN -class=l\$$FNAME -dir=$TDIR/ >$TDIR/$FNAME.java; then
	# if using java target, make "links" file and compile the code
	if [ $TARGET = java ]; then
	    sed -n 's=^//JCON//links:==p' $TDIR/$FNAME.java >$TDIR/links
	    (cd $TDIR; $JAVAC $FNAME.java)
	fi
	# bundle .class files (and linkage info) into .zip file
	$ZIP -0 -j -q $FNAME.zip $TDIR/links $TDIR/*.class
    else
	ERREXIT="exit"
    fi
done
$ERREXIT 1
$TANNOUNCE 1>&2 "No errors"

# exit here if no linking wanted
$NOLINK
$ANNOUNCE 1>&2 "Linking:"

# generate list of files needed for linking
$JAVA rts.FindFiles $LINKTRACE "$UIPATH" $ZFILES >$TDIR/zip.list

# unpack all those .zip files
rm -f $TDIR/*.class
for FNAME in `<$TDIR/zip.list`; do
    $UNZIP -n -d $TDIR -q $FNAME '[lp]*.class'
done

# combine the Icon files from there
(cd $TDIR; ls | grep '^[lp].*\.class$' | xargs $ZIP -0 -q combined.zip)

# combine a header (padded via dd) with that zip file to make a script
# (if making significant changes here, also adjust HBASE above)
(dd bs=$HDRSIZE conv=sync 2>/dev/null; cat $TDIR/combined.zip) \
    <<=====EOF===== >$XFILE
#!/bin/ksh

# built by:  $CMDLINE

WHENCE=\`whence \$0\`
case \$WHENCE in
    /*)	THISFILE=\$WHENCE;;
    *)	THISFILE=\`pwd\`/\$WHENCE;;
esac

TZIP=/tmp/jcon\$\$.zip
trap "rm -rf \$TZIP" 0 1 2 15
dd bs=$HDRSIZE skip=1 <\$THISFILE >\$TZIP 2>/dev/null

export CLASSPATH="\$TZIP:$JRTS"
$JAVA rts.Main $ROOTS -- "\$0" "\$@"
exit

[binary data follows]

%%%%
=====EOF=====

# verify that the header was big enough
dd bs=$HDRSIZE count=1 <$XFILE 2>/dev/null | grep '%%%%' >/dev/null ||
    (echo 1>&2 "internal error in $0: header too small" && exit 1)

# the process was successful
# mark the script as executable and delete built .zip files
chmod +x $XFILE
$NODELETE rm -f $ZBUILT

# execute, or don't
$NOEXECUTE
$NODELETE rm -rf $TDIR
$ANNOUNCE 1>&2 "Executing:"
exec ./$XFILE "$@"
