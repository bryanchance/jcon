#  tcompare -- collate outputs from "timings.icn" runs
#  2-apr-98/gmt
#
#  usage:  tcompare file...
#
#  Reads output files created by the "timings.icn" program and prints
#  corresponding timings in columns.  The "maxerr" line (the second
#  entry generated) gives the absolute value of the maximum "nothing"
#  line read.
#
#  Time ratios relative the first column are also printed.  Deviations
#  of more than 10%, even after allowing for maxerr, are noted by
#  "*" (10% faster) or "#" (10% slower).
#
#  Error checking is minimal.  Input is assumed to be valid.


global tlist	# list of tests run (in printout order)
global tset	# set of known tests

global flist	# list of file names
global vlist	# corresponding list of timing tables


procedure main(args)
   local fname, t, vt, d, de, v, ve

   tlist := ["overhead", "maxerr"]
   tset := set(tlist)

   flist := list()
   vlist := list()

   every fname := !args do
      dofile(fname)

   every writes(fit(!flist, 7), " ")
   writes("  operation     ")
   every writes(" ", fit(flist[2 to *flist], 9))
   write()

   every !flist do writes("------- ")
   writes("  ------------  ")
   every 2 to *flist do writes(" ---------")
   write()

   every t := !tlist do {
      every vt := !vlist do
         writes(right(\vt[t] | "", 7), " ")
      writes("  ", left(t, 14))
      if d := real(0 ~= \vlist[1][t]) then {
	 de := vlist[1]["maxerr"]
         every vt := vlist[2 to *vlist] do {
            if v := \vt[t] then {
	       ve := vt["maxerr"]
               writes(frn(v / d, 8, 2))
               if ((v - ve) / (d + de)) > 1.1 then
                  writes(" #")
               else if d > de & ((v + ve) / (d - de)) < 0.9 then
                  writes(" *")
               else
                  writes("  ")
               }
            else
               writes("           ")
            }
         }
      write()
      }
end


procedure dofile(fname)
   local f, vt, v, t, line

   put(flist, fname)
   put(vlist, vt := table())
   vt["maxerr"] := 0
   f := open(fname) | stop("can't open ", fname)

   while line := read(f) do line ? {
      v := integer(move(10)) | stop("non-integer time in ", fname)
      move(2)
      t := tab(0)
      if t == "nothing" then
	 vt["maxerr"] <:= abs(v)
      else { 
         vt[t] := v
         if not member(tset, t) then {
            insert(tset, t)
            put(tlist, t)
            }
	 }
      }

   close(f)
   return
end


procedure fit(s, n)
   if *s > n then
      return s[1+:n]
   else
      return right(s, n)
end



#  frn(r, w, d) -- format real number
#
#  Converts the value r into a string with d digits after the decimal point.
#  A result narrower than w characters is padded on the left with spaces.
#  Fixed format is always used; there is no exponential notation.
#
#  defaults:	w: 0
#		d: 0

$define MAXDECIMALS 25

procedure frn(r, w, d)
   local s
   static mlist
   initial every put(mlist := list(), 10.0 ^ (0 to MAXDECIMALS))

   r := real(r) | runerr(102, r)
   (/d := 0) | (d >=:= MAXDECIMALS)
   if r >= 0.0 then {
      s := string(integer(r * mlist[d + 1] + 0.5))
      s := right(s, *s < d, "0")
      }
   else {
      s := string(integer(-r * mlist[d + 1] + 0.5))
      s := right(s, *s < d, "0")
      s := "-" || s
      }
   s := right(s, *s < (\w - 1))
   return s ? (tab(-d) || "." || tab(0))
end
