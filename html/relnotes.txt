<P> Version 2.1 of Jcon includes minor feature additions,
documentation edits, and bug fixes.  
Changes include the following:

<UL>
    <LI> A directory can be read by opening it as a file.
    <LI> JPEG images can be written under Java 2 implementations.
    <LI> Java class files can be bundled with a Jcon program for
    	easier dynamic loading.
    <LI> The run-time system can be bundled with a Jcon program
    	to make it completely self-contained.
    <LI> Large integers now work with <CODE>to</CODE>-<CODE>by</CODE>,
	 <CODE>seq()</CODE>, limitation (<CODE>e1 \ e2</CODE>),
	 and exponentiation (<CODE>e1 ^ e2</CODE>)
    <LI> A zero increment value is diagnosed by <CODE>seq()</CODE>
    <LI> <CODE>&amp;host</CODE> no longer spawns a shell invocation
	of <CODE>uname</CODE> (but see <CITE>Problems</CITE>, below)
    <LI> The run-time package name has been changed from <CODE>rts</CODE>
    	to <CODE>jcon</CODE>.  All programs must be recompiled.
</UL>

<H3>Tested Platforms</H3>

<P> Jcon has been successfully tested on:
<BLOCKQUOTE>
	Sun Sparc / Solaris 2.6 (SunOS 5.6) / Sun Java 1.3beta0
	<BR> SGI Indigo2 / Irix 6.5 / SGI Java 3.1.1 (JDK 1.1.6N)
	<BR> IBM RS6000 / AIX 4.3 / IBM Java 1.1.6-19990401
	<BR> DEC Alpha / Digital Unix 4.0D / Digital Java 1.1.6-2
	<BR> Intel / Linux 2.2.5 (Red Hat 6.0) / IBM JDK 1.1.6-990814
</BLOCKQUOTE>

<P> We would be interested to learn of either successes or failures
on other platforms.

<H3>Known problems (nongraphical)</H3>
<UL>
    <LI>Some JIT compilers fail to execute Jcon programs correctly.
	Disabling the JIT compiler produces correct execution.
	<!-- Sun JDK1.2, Sun HotSpot, IBM AIX Java -->
	<!-- Also IBM Linux java, the ck test (-0.0 vs. 0.0) -->
    <LI>The <CODE>-S</CODE> option of <CODE>jcont</CODE> does not work
    	for programs that link other files.
    <LI><CODE>&amp;clock</CODE> and <CODE>&amp;dateline</CODE>
	may be off by one hour (Java bug #4059431).
    <LI>On Solaris systems, <CODE>&amp;host</CODE>
	may return "localhost" (Java bug #4073539).
    <LI>Extremely large procedures (thousands of lines long)
	can generate code that is too large for Java to handle.
</UL>

<H3>Known graphics problems</H3>

<P> Some problems are universal:
<UL>
    <LI>When an obscured part of a window is exposed,
	it may not be repaired (redrawn) until the program
	pauses to await an event.
    <LI><CODE>WOpen("image=file.gif")</CODE> does not load an image
   	if presented with a multi-part (animated) GIF image.
</UL>
<P> Other problems are seen only on some platforms and are
attributed to Java bugs:
<UL>
    <LI>Fonts can be poor when one vendor's Java system displays
    	on another vendor's X server. <!--esp. Sun Java-->
    <LI>Different fonts may be written to the window and to
	and its backup image, leading to bizarre effects from
	<CODE>CopyArea()</CODE> and window repair. <!--Dec 1.1.6, Sun 1.2-->
    <LI>On one older system, nothing appears in a window
	until it is dragged to a different location. <!--Linux 1.1.7a-->
    <LI>The initial window size may not be as specified:
    	<UL>
	    <LI> It is one pixel too wide, or	<!--DEC-->
	    <LI> It is always the default size, or 
	    <LI> Its height is correct but its width is the default.
	    	<!--Linux 1.1.7a-->
	</UL>
    <LI>Intermittently, <CODE>drawop=reverse</CODE> draws the wrong color.
    <LI>GIF images have a yellowish tint. <!--IBM Java 1.1.6-19990401-->
    <LI>The <CODE>CopyArea()</CODE> section of the <CODE>gpxtest</CODE>
    	program shows a minor glitch. <!--Sun1.2Ref+hotspot-->
</UL>
