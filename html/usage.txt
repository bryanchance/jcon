<I>Jcont</I> translates Icon source files into <CODE>.zip</CODE> files,
and links <CODE>.zip</CODE> files to make an excutable program. 
<I>Jcont</I> is similar to <I>icont</I> in concept and behavior;
think of a <CODE>.zip</CODE> file as analogous to a
<CODE>.u1</CODE>/<CODE>.u2</CODE> pair generated by <I>icont</I>.

<p>
Normally, <I>jcont</I> produces a directly executable Korn Shell script
containing an embedded Zip file.
Running the script executes the compiled Icon program,
and arguments can be passed as usual.

<H3>Synopsis</H3>
<blockquote>
<CODE>jcont </CODE>[<VAR>options</VAR>] <VAR>file...</VAR>
	[<CODE>-x</CODE> [arguments]]
<br>
</blockquote>

<H3>File Arguments</H3>
<BLOCKQUOTE><TABLE>
<TR><TD WIDTH=50 VALIGN=TOP><VAR>file</VAR><CODE>.icn</CODE></TD><TD>
	Icon source file to compile and link</TD></TR>
<TR><TD WIDTH=50 VALIGN=TOP><VAR>file</VAR><CODE>.zip</CODE></TD><TD>
	Previously compiled file to link</TD></TR>
</TABLE></BLOCKQUOTE>

<H3>Options</H3>
<BLOCKQUOTE><TABLE>
<TR><TD WIDTH=50 VALIGN=TOP><CODE>-b</CODE></TD><TD>
	generate backwards-compatible <CODE>.u1</CODE> and <CODE>.u2</CODE>
	files; implies <CODE>-c</CODE></TD></TR>
<TR><TD WIDTH=50 VALIGN=TOP><CODE>-c</CODE></TD><TD>
	compile only: don't produce an executable</TD></TR>
<TR><TD WIDTH=50 VALIGN=TOP><CODE>-E</CODE></TD><TD>
	preprocess only</TD></TR>
<TR><TD WIDTH=50 VALIGN=TOP><CODE>-f d</CODE></TD><TD>
	enable debugging features (tracing, error conversion)</TD></TR>
<TR><TD WIDTH=50 VALIGN=TOP><CODE>-h</CODE></TD><TD>
	print a usage message and exit</TD></TR>
<TR><TD WIDTH=50 VALIGN=TOP><CODE>-j</CODE></TD><TD>
	produce a <CODE>.jar</CODE> file instead of an executable script
	</TD></TR>
<TR><TD WIDTH=50 VALIGN=TOP><CODE>-o</CODE> <VAR>exe</VAR></TD><TD>
	specify output file for executable</TD></TR>
<TR><TD WIDTH=50 VALIGN=TOP><CODE>-s</CODE></TD><TD>
	silent: suppress commentary</TD></TR>
<TR><TD WIDTH=50 VALIGN=TOP><CODE>-t</CODE></TD><TD>
	compile with <CODE>-f d</CODE> (to allow tracing)
	and initialize <CODE>&AMP;trace</CODE> to -1</TD></TR>
<TR><TD WIDTH=50 VALIGN=TOP><CODE>-u</CODE></TD><TD>
	diagnose undeclared variables</TD></TR>
<TR><TD WIDTH=50 VALIGN=TOP><CODE>-x</CODE></TD><TD>
	execute after compilation
	(appears <EM>after</EM> file arguments)
	</TD></TR>
</TABLE></BLOCKQUOTE>
<P>The following options are mainly for debugging Jcon:
<BLOCKQUOTE><TABLE>
<TR><TD WIDTH=50 VALIGN=TOP><CODE>-d</CODE></TD><TD>
	debug jcont: use <CODE>./jtmp</CODE> for temporary files,
	and do not delete them when finished</TD></TR>
<TR><TD WIDTH=50 VALIGN=TOP><CODE>-J</CODE></TD><TD>
	use Jcon-built versions of <I>jtran</I> and <I>jlink</I>,
	if available</TD></TR>
<TR><TD WIDTH=50 VALIGN=TOP><CODE>-P</CODE></TD><TD>
	pessimize: don't optimize the generated Java code</TD></TR>
<TR><TD WIDTH=50 VALIGN=TOP><CODE>-S</CODE></TD><TD>
	also generate a <CODE>.jvm</CODE> file listing
	the generated Java code</TD></TR>
<TR><TD WIDTH=50 VALIGN=TOP><CODE>-v</CODE></TD><TD>
	verbose: echo shell commands and trace linking steps
</TABLE></BLOCKQUOTE>

<H3>Environment Variables</H3>

<P> The following environment variables affect compilation:
<BLOCKQUOTE><TABLE>
<TR><TD WIDTH=100 VALIGN=TOP><CODE>LPATH</CODE></TD><TD>
	Search path for <CODE>$include</CODE> directives
<TR><TD WIDTH=100 VALIGN=TOP><CODE>IPATH</CODE></TD><TD>
	Search path for <CODE>link</CODE> directives
</TABLE></BLOCKQUOTE>

<P> The following environment variables affect execution:
<BLOCKQUOTE><TABLE>
<TR><TD WIDTH=100 VALIGN=TOP><CODE>CLASSPATH</CODE></TD><TD>
	Search path for Java libraries required at execution time.
	This is not usually needed unless the libraries have moved
<TR><TD WIDTH=100 VALIGN=TOP><CODE>JXOPTS</CODE></TD><TD>
	Options passed to the Java interpreter that runs the program.
	Depending on the implementation, JXOPTS can select options
	such as profiling or run-time compilation to machine code.
<TR><TD WIDTH=100 VALIGN=TOP><CODE>TRACE</CODE></TD><TD>
	Initial value of the Icon keyword <CODE>&AMP;trace</CODE>.
	If set, it overrides compilation with <CODE>-t</CODE>. 
</TABLE></BLOCKQUOTE>

<H3>Jar file output</H3>

<P> If <CODE>-j</CODE> is passed to jcont, the final output file is given a
<CODE>.jar</CODE> extension and the header is omitted to facilitate
manipulation of the file as an archive.
Execution is accomplished by naming the file in the
CLASSPATH (with the run-time library) and then running java:
<BLOCKQUOTE><CODE>
	jcont -j myprog.icn
	<BR>setenv CLASSPATH myprog.jar:/myhome/jcon/bin/rts.zip
	<BR>java myprog
</CODE></BLOCKQUOTE>

<P> It is possible to transport such a Jar file for execution on another
machine, possibly even one of different architecture.
The run-time library <CODE>rts.zip</CODE> must also be made available on
the target machine.
Details will depend on the particular Java implementation
but will be similar in concept to the Unix example give above.

<H3>Caveats</H3>

<P> <I>java</I> and <I>jar</I> must be in the search path,
and <I>javap</I> if <CODE>-S</CODE> is used.

<PRE>

compilation and linking:
-- "jcont foo.zip" doesn't search IPATH (only link'd files are searched for)
-- compiled .zip files cannot be renamed: name must match original .icn name
   (however, executables can be renamed)

execution:
-- if Java runs out of memory, setenv JXOPTS='-mx50m' (e.g.) to increase max
-- out-of-memory errors say "block region"; there is no separate string region
-- executables are portable among dissimilar Unix platforms (just need ksh+Java)
</PRE>
