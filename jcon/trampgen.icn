#  trampgen.icn -- utility to create debugging trampoline routines

procedure main()
    write("//  AUTOMATICALLY GENERATED FILE -- DO NOT EDIT!")
    write()
    write("package jcon;")
    operators()
    boilerplate()
end

procedure operators()
    local i, o, ops, signature, format

    ops := [

	# arity,  op, method name,    return type

	[ 1,        , "Call",         "vDescriptor" ],
	[ 2,        , "Call",         "vDescriptor" ],
	[ 3,        , "Call",         "vDescriptor" ],
	[ 4,        , "Call",         "vDescriptor" ],
	[ 5,        , "Call",         "vDescriptor" ],
	[ 6,        , "Call",         "vDescriptor" ],
	[ 7,        , "Call",         "vDescriptor" ],
	[ 8,        , "Call",         "vDescriptor" ],
	[ 9,        , "Call",         "vDescriptor" ],
	[10,        , "Call",         "vDescriptor" ],

	[ 1,     ".", "Deref",        "vValue"      ],
	[ 2,    ":=", "Assign",       "vVariable"   ],
	[ 2,   ":=:", "Swap",         "vVariable"   ],
	[ 2,    ":?", "SubjAssign",   "vVariable",  "{$ ? ..}"   ],
	[ 2,    "<-", "RevAssign",    "vDescriptor" ],
	[ 2,   "<->", "RevSwap",      "vDescriptor" ],

	[ 1,     "#", "Limit",        "vNumeric",   "limit counter: $"    ],
	[ 2,     "&", "Conjunction",  "vDescriptor" ],
	[ 2,     "@", "Activate",     "vDescriptor" ],
	[ 3,   "...", "ToBy",         "vDescriptor", "{$ to $ by $}" ],

	[ 1,     "+", "Numerate",     "vNumeric"    ],
	[ 1,     "-", "Negate",       "vNumeric"    ],
	[ 1,     "*", "Size",         "vInteger"    ],
	[ 1,     "~", "Complement",   "vValue"      ],
	[ 1,     "^", "Refresh",      "vCoexp"      ],
	[ 1,     "=", "TabMatch",     "vDescriptor" ],

	[ 1,     "/", "IsNull",       "vDescriptor" ],
	[ 1,    "\\", "IsntNull",     "vDescriptor" ],

	[ 1,     "?", "Select",       "vDescriptor", &null, ["Val", "vValue"] ],
	[ 1,     "!", "Bang",         "vDescriptor", &null, ["Val", "vDescriptor"] ],

	[ 2,    "[]", "Index",        "vDescriptor", "{$[$]}", ["Val", "vValue"] ],
	[ 3,   "[:]", "Section",      "vDescriptor", "{$[$:$]}", ["Val", "vValue"] ],
	[ 3,  "[+:]", "SectPlus",     "vDescriptor", "{$[$+:$]}", ["Val", "vValue"] ],
	[ 3,  "[-:]", "SectMinus",    "vDescriptor", "{$[$-:$]}", ["Val", "vValue"] ],

	[ 2,     "+", "Add",          "vNumeric"    ],
	[ 2,     "-", "Sub",          "vNumeric"    ],
	[ 2,     "*", "Mul",          "vNumeric"    ],
	[ 2,     "/", "Div",          "vNumeric"    ],
	[ 2,     "%", "Mod",          "vNumeric"    ],
	[ 2,     "^", "Power",        "vNumeric"    ],

	[ 2,     "<", "NLess",        "vNumeric"    ],
	[ 2,    "<=", "NLessEq",      "vNumeric"    ],
	[ 2,     "=", "NEqual",       "vNumeric"    ],
	[ 2,    "~=", "NUnequal",     "vNumeric"    ],
	[ 2,    ">=", "NGreaterEq",   "vNumeric"    ],
	[ 2,     ">", "NGreater",     "vNumeric"    ],

	[ 2,    "<<", "LLess",        "vString"     ],
	[ 2,   "<<=", "LLessEq",      "vString"     ],
	[ 2,    "==", "LEqual",       "vString"     ],
	[ 2,   "~==", "LUnequal",     "vString"     ],
	[ 2,   ">>=", "LGreaterEq",   "vString"     ],
	[ 2,    ">>", "LGreater",     "vString"     ],

	[ 2,   "===", "VEqual",       "vValue"      ],
	[ 2,  "~===", "VUnequal",     "vValue"      ],

	[ 2,    "||", "Concat",       "vString"     ],
	[ 2,   "|||", "ListConcat",   "vList"       ],

	[ 2,    "**", "Intersect",    "vValue"      ],
	[ 2,    "++", "Union",        "vValue"      ],
	[ 2,    "--", "Diff",         "vValue"      ]
    ]

    write("public final class iTrampoline {")
    every o := !ops do {
	format := &null
	if \o[2] then {
	    case o[1] of {
	    1:       format := "{" || o[2] || " $}"
	    2:       format := "{" || "$ " || o[2] || " $}"
	    }
	    format := \o[5]
	}
	op_trampoline(o[1], o[2], o[3], o[4], format)
	op_trampoline(o[1], o[2], o[3] || (\o[6])[1], o[6][2], format)
    }
end

procedure op_trampoline(arity, op, name, type, format)
    local i

    write()
    writes("public static ", type, " ", name, "(String fname, int lineno")
    every i := 1 to arity do {
        writes(", vDescriptor a", i)
    }
    write(") {")

    if \op then {

        \format | runerr(500)

	write("\ttry {")
	writes("\t\t", type, " retval = a1.", name, "(")
	every i := 2 to arity do {
	    if i > 2 then {
	    writes(", ")
	    }
	    writes("a", i)
	}
	write(");")
        write("\t\treturn retval;")
	write("\t} catch (iError e) {")
        writes("\t\te.propagate(fname, lineno, ", image(format))
        every i := 1 to arity do {
            writes(", a", i)
        }
        write(");")
	write("\t\treturn null;")
	write("\t}")

    } else {

        writes("\tvDescriptor[] args = {")
	every writes(" a", 2 to arity, ",")
	write(" };")
	write("\ttry {")
	write("\t\tiEnv.cur_coexp.depth++;")
	write("\t\tvDescriptor retval = iTrace.Call(fname, lineno, a1, args);")
	write("\t\tiEnv.cur_coexp.depth--;")
	write("\t\treturn retval;")
	write("\t} catch (iError e) {")
	write("\t\tiEnv.cur_coexp.depth--;")
	write("\t\te.propagate(fname, lineno, a1, args);")
	write("\t\treturn null;")
	write("\t}")
    }

    write("}")
end

procedure boilerplate()
    every write(![
"",
"public static vVariable Field(String fname, int lineno, vDescriptor record, String field) {",
"	try {",
"		return record.Field(field);",
"	} catch (iError e) {",
"		e.propagate(fname, lineno, record, field);",
"		return null;",
"	}",
"}",
"",
"public static vDescriptor Call(String fname, int lineno, vDescriptor a, vDescriptor[] args) {",
"	try {",
"		iEnv.cur_coexp.depth++;",
"		vDescriptor retval = iTrace.Call(fname, lineno, a, args);",
"		iEnv.cur_coexp.depth--;",
"		return retval;",
"	} catch (iError e) {",
"		iEnv.cur_coexp.depth--;",
"		e.propagate(fname, lineno, a, args);",
"		return null;",
"	}",
"}",
"",
"public static vDescriptor ProcessArgs(String fname, int lineno, vDescriptor a1, vDescriptor a2) {",
"	try {",
"		iEnv.cur_coexp.depth++;",
"		vDescriptor retval =",
"			iTrace.Call(fname, lineno, a1, a2.mkArray(126));", 
"		iEnv.cur_coexp.depth--;",
"		return retval;",
"	} catch (iError e) {",
"		iEnv.cur_coexp.depth--;",
"		e.propagate(fname, lineno, a1, a2);",
"		return null;",
"	}",
"}",
"",
"public static vDescriptor Resume(String fname, int lineno, vDescriptor object) {",
"	try {",
"		return iTrace.Resume(fname, lineno, object);",
"	} catch (iError e) {",
"		if (object instanceof vTracedClosure) {",
"			vTracedClosure t = (vTracedClosure) object;",
"			e.propagate(fname, lineno, t.tracedProc, t.tracedArgs);",
"		} else {",
"			throw e;",
"		}",
"		return null;",
"	}",
"}",
"",
"} // class iTrampoline",
    ])
end
