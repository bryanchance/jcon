# test sorting 

procedure main()
   listtest()
   rectest()
end



#  listtest() -- test sorting of lists and sets

procedure listtest()
   local n, x, S, L1, L2, L3

   every n := (0 to 10) | 23 | 47 | 91 do {

      write(n, ":")
      S := set()
      while *S < n do
         insert(S, randval())

      L1 := list()
      every put (L1, !S)

      L2 := sort(L1)
      L3 := sort(set(L1))

#wlist(L2)
#wlist(L3)
      check(L2, L3)

   }
end


#  rectest() -- test sorting of records

record r0()
record r1(a)
record r2(a,b)
record r5(a,b,c,d,e)

procedure rectest()
   write()
   wlist(sort(r0()))
   wlist(sort(r1(12)))
   wlist(sort(r2(5,2)))
   wlist(sort(r5(2,7,1,8,3)))
   wlist(sort(r5(3,1,4,1,6)))
   wlist(sort(r5("t","e","p","a","d")))
end



#  randval() -- return random integer, real, string, or cset value

procedure randval()
   return case ?4 of {
      1:  ?999					# 000 - 999
      2:  ?99 / 10.0				# 0.0 - 9.9
      3:  ?&letters || ?&letters || ?&letters	# "AAA" - "ZZZ"
      4:  ?&digits ++ ?&letters ++ ?&letters	# '0AA' - '9ZZ'
      }
end


#  check that two lists have identical components
#  and that they are in ascending order

procedure check(a, b)
   local i, ai, ai1, bi, d

   if *a ~= *b then
      stop("different sizes: ", image(a), " / ", image(b))
   every i := 1 to *a do {
      ai := a[i]
      bi := b[i]
      ai1 := a[i-1] | &null
      if ai ~=== bi then
         stop("element ", i, " differs")
      if type(ai) === type(ai1) then {
         case type(ai) of {
	    "integer":	d := (ai1 > ai) | &null
	    "real":	d := (ai1 > ai) | &null
	    "string":	d := (ai1 >> ai) | &null
	    }
	 stop("element ", i, " out of order: ", image(\d))
         }
      }
   return
end


#  write list

procedure wlist(L)
   writes(*L, ":")
   every writes(right(!L, 4) | "\n")
   return
end
