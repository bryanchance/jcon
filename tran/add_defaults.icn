# record NoOp( )
procedure add_defaults_NoOp(p)
	return p
end

# record ProcCode( init body )
procedure add_defaults_ProcCode(p)
	p.init := add_defaults(p.init)
	p.body := add_defaults(p.body)
	return p
end

# record Field( expr field )
procedure add_defaults_Field(p)
	p.expr := add_defaults(p.expr)
	return p
end

# record Case( expr clauseList dflt)
procedure add_defaults_Case(p)
	/p.dflt := Key("fail")
	p.expr := add_defaults(p.expr)
	every add_defaults(!p.clauseList)
	p.dflt := add_defaults(p.dflt)
	return p
end

# record Cclause( expr body )
procedure add_defaults_Cclause(p)
	p.expr := add_defaults(p.expr)
	p.body := add_defaults(p.body)
	return p
end

# record Not( expr )
procedure add_defaults_Not(p)
	p.expr := add_defaults(p.expr)
	return p
end

# record RepAlt( expr )
procedure add_defaults_RepAlt(p)
	p.expr := add_defaults(p.expr)
	return p
end

# record Call( fn args )
procedure add_defaults_Call(p)
	p.fn := add_defaults(p.fn)
	p.args := add_defaults(p.args)
	return p
end

# record ExclAlt( e1 e2 )
procedure add_defaults_ExclAlt(p)
	p.e1 := add_defaults(p.e1)
	p.e2 := add_defaults(p.e2)
	return p
end

# record Alt( e1 e2 )
procedure add_defaults_Alt(p)
	p.e1 := add_defaults(p.e1)
	p.e2 := add_defaults(p.e2)
	return p
end

# record Limitation( expr limit )
procedure add_defaults_Limitation(p)
	p.expr := add_defaults(p.expr)
	p.limit := add_defaults(p.limit)
	return p
end

# record Scan( expr body )
procedure add_defaults_Scan(p)
	p.expr := add_defaults(p.expr)
	p.body := add_defaults(p.body)
	return p
end

# record Every( expr body )
procedure add_defaults_Every(p)
	/p.body := Key("fail")
	p.expr := add_defaults(p.expr)
	p.body := add_defaults(p.body)
	return p
end

# record Sectionop( op val left right )
procedure add_defaults_Sectionop(p)
	p.val := add_defaults(p.val)
	p.left := add_defaults(p.left)
	p.right := add_defaults(p.right)
	return p
end

# record Binop( op left right )
procedure add_defaults_Binop(p)
	p.left := add_defaults(p.left)
	p.right := add_defaults(\p.right) | Key("null")
	return p
end

# record Unop( op operand )
procedure add_defaults_Unop(p)
	p.operand := add_defaults(p.operand)
	if p.op == "@" then {
		p := Binop("@", Key("null"), p.operand, p.coord)
	}
	return p
end

# record Global( idList )
procedure add_defaults_Global(p)
	return p
end

# record If( expr thenexpr elseexpr )
procedure add_defaults_If(p)
	/p.elseexpr := Key("fail")
	p.expr := add_defaults(p.expr)
	p.thenexpr := add_defaults(p.thenexpr)
	p.elseexpr := add_defaults(p.elseexpr)
	return p
end

# record Initial( expr )
procedure add_defaults_Initial(p)
	/p.expr := NoOp()
	p.expr := add_defaults(p.expr)
	return p
end

# record Invocable( ivocopList )
procedure add_defaults_Invocable(p)
	return p
end

# record Link( linkfileList )
procedure add_defaults_Link(p)
	return p
end

# record Intlit( int )
procedure add_defaults_Intlit(p)
	return p
end

# record Reallit( real )
procedure add_defaults_Reallit(p)
	return p
end

# record Stringlit( str )
procedure add_defaults_Stringlit(p)
	return p
end

# record Csetlit( str )
procedure add_defaults_Csetlit(p)
	return p
end

# record Locals( idList )
procedure add_defaults_Locals(p)
	return p
end

# record Statics( idList )
procedure add_defaults_Statics(p)
	return p
end

# record ProcDecl( ident paramList localsList code )
procedure add_defaults_ProcDecl(p)
	p.code := add_defaults(p.code)
	return p
end

# record ProcBody( nexprList )
procedure add_defaults_ProcBody(p)
	p.nexprList := add_defaults(p.nexprList)
	every /(!p.nexprList) := Key("null")
	return p
end

# record Record( ident idlist )
procedure add_defaults_Record(p)
	p.idlist := add_defaults(p.idlist)
	return p
end

# record Repeat( expr )
procedure add_defaults_Repeat(p)
	p.expr := add_defaults(p.expr)
	return p
end

# record Return( expr )
procedure add_defaults_Return(p)
	/p.expr := Key("null")
	p.expr := add_defaults(p.expr)
	return p
end

# record Fail( )
procedure add_defaults_Fail(p)
	return p
end

# record Suspend( expr body )
procedure add_defaults_Suspend(p)
	/p.body := Key("fail") & /p.expr := Key("null")
	p.expr := add_defaults(p.expr)
	p.body := add_defaults(p.body)
	return p
end

# record Until( expr body )
procedure add_defaults_Until(p)
	/p.body := Key("fail")
	p.expr := add_defaults(p.expr)
	p.body := add_defaults(p.body)
	return p
end

# record While( expr body )
procedure add_defaults_While(p)
	/p.body := Key("fail")
	p.expr := add_defaults(p.expr)
	p.body := add_defaults(p.body)
	return p
end

# record Create( expr )
procedure add_defaults_Create(p)
	p.expr := add_defaults(p.expr)
	return p
end

# record Ident( id )
procedure add_defaults_Ident(p)
	return p
end

# record Next( )
procedure add_defaults_Next(p)
	return p
end

# record Break( expr )
procedure add_defaults_Break(p)
	/p.expr := Key("null")
	p.expr := add_defaults(p.expr)
	return p
end

# record ToBy( fromexpr toexpr byexpr )
procedure add_defaults_ToBy(p)
	/p.byexpr := Intlit("1")
	p.fromexpr := add_defaults(p.fromexpr)
	p.toexpr := add_defaults(p.toexpr)
	p.byexpr := add_defaults(p.byexpr)
	return p
end

# record Mutual( exprList )
procedure add_defaults_Mutual(p)
	p.exprList := add_defaults(p.exprList)
	if *p.exprList = 0 then {
		p.exprList := [ Key("null") ]
	}
	every /(!p.exprList) := Key("null")
	return p
end

# record CoexpList( exprList )
procedure add_defaults_CoexpList(p)
	local L

	p.exprList := add_defaults(p.exprList)
	every /(!p.exprList) := Key("null")

	L := []
	every put(L, Create(!p.exprList))
	p := Arglist([ListConstructor(L)])
	return p
end

# record Arglist( exprList )
procedure add_defaults_Arglist(p)
	p.exprList := add_defaults(p.exprList)
	every /(!p.exprList) := Key("null")
	return p
end

# record Compound( exprList )
procedure add_defaults_Compound(p)
	p.exprList := add_defaults(p.exprList)
	every /(!p.exprList) := Key("null")
	return p
end

# record ListConstructor( exprList )
procedure add_defaults_ListConstructor(p)
	p.exprList := add_defaults(p.exprList)
	every /(!p.exprList) := Key("null")
	return p
end

# record Key( id )
procedure add_defaults_Key(p)
	static functions
	initial {
		functions := key_functions()
	}

	if member(functions, p.id) then {
		p := Call(p, Arglist([]))
	}
	return p
end

procedure add_defaults(p)
	local i

	case type(\p) of {
	"Alt" : return add_defaults_Alt(p)
	"ExclAlt" : return add_defaults_ExclAlt(p)
	"Call" : return add_defaults_Call(p)
	"Not" : return add_defaults_Not(p)
	"RepAlt" : return add_defaults_RepAlt(p)
	"Field" : return add_defaults_Field(p)
	"NoOp" : return add_defaults_NoOp(p)
	"Case" : return add_defaults_Case(p)
	"Cclause" : return add_defaults_Cclause(p)
	"Every" : return add_defaults_Every(p)
	"Scan" : return add_defaults_Scan(p)
	"Limitation" : return add_defaults_Limitation(p)
	"Sectionop" : return add_defaults_Sectionop(p)
	"Binop" : return add_defaults_Binop(p)
	"Unop" : return add_defaults_Unop(p)
	"Global" : return add_defaults_Global(p)
	"If" : return add_defaults_If(p)
	"Initial" : return add_defaults_Initial(p)
	"Invocable" : return add_defaults_Invocable(p)
	"Link" : return add_defaults_Link(p)
	"Intlit" : return add_defaults_Intlit(p)
	"Reallit" : return add_defaults_Reallit(p)
	"Stringlit" : return add_defaults_Stringlit(p)
	"Csetlit" : return add_defaults_Csetlit(p)
	"Locals" : return add_defaults_Locals(p)
	"Statics" : return add_defaults_Statics(p)
	"ProcDecl" : return add_defaults_ProcDecl(p)
	"ProcBody" : return add_defaults_ProcBody(p)
	"ProcCode" : return add_defaults_ProcCode(p)
	"Record" : return add_defaults_Record(p)
	"Repeat" : return add_defaults_Repeat(p)
	"Return" : return add_defaults_Return(p)
	"Fail" : return add_defaults_Fail(p)
	"Suspend" : return add_defaults_Suspend(p)
	"Until" : return add_defaults_Until(p)
	"While" : return add_defaults_While(p)
	"Create" : return add_defaults_Create(p)
	"Ident" : return add_defaults_Ident(p)
	"Next" : return add_defaults_Next(p)
	"Break" : return add_defaults_Break(p)
	"ToBy" : return add_defaults_ToBy(p)
	"Mutual" : return add_defaults_Mutual(p)
	"Arglist" : return add_defaults_Arglist(p)
	"CoexpList" : return add_defaults_CoexpList(p)
	"Compound" : return add_defaults_Compound(p)
	"ListConstructor" : return add_defaults_ListConstructor(p)
	"Key" : return add_defaults_Key(p)
	"list" : {
	    every i := 1 to *p do {
		    p[i] := add_defaults(p[i])
	    }
	    return p
	}
	"string" : {}
	default : {
	    stop("FATAL ERROR: add_defaults(), type(p) is ", type(p))
	}
	}
end
