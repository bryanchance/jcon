global dot_emit_table

procedure dot_emit(label, code)
	dot_emit_table[label] := code
end

procedure dot_dump(i)
	return map(ir_dump(i), "<>", "()")
end

procedure dot_output(t)
	local label, code, lab, s, i, insn

	every label := key(t) & code := t[label] do {
		lab := image(dot_dump(label))
		writes(lab)
		writes(" [shape=record,label=")
		s := "{ <f0> "
		s ||:= dot_dump(label) || ":"
		every i := 1 to *code do {
			s ||:= " |"
			s ||:= "<f" || i || "> " || dot_dump(code[i])
		}
		s ||:= " }"
		writes(image(s))
		write("];")
		every i := 1 to *code do {
			insn := code[i]
			case type(insn) of {
			"irMove" : {
				if type(insn.lhs) == "irTmpLabel" then {
					write(image(dot_dump(insn.lhs)), "->", image(dot_dump(insn.rhs)))
				}
				}
			"irGoto" : {
				write(lab, ":f", i, " ->", image(dot_dump(insn.location)))
				}
			"irResume" : {
				write(lab, ":f", i, " ->", image(dot_dump(insn.failLabel)), " [label=failure]")
				}
			"irSucceed" : {
				write(lab, ":f", i, " ->", image(dot_dump(insn.continuation)), " [label=continuation]")
				}
			"irCoRet" : {
				write(lab, ":f", i, " ->", image(dot_dump(insn.continuation)), " [label=continuation]")
				}
			"irEnterInit" : {
				write(lab, ":f", i, " ->", image(dot_dump(insn.startlabel)), " [label=start]")
				}
			}
		}
	}
end

procedure dot_invocables(all, L)
end

procedure dot_links(L)
end

procedure dot_records(name, fields, coord)
end

procedure dot_globals(L)
end

procedure dot_function(name, params, accumulate, locals, statics, code, coord)
	write("digraph ", name, " {")
	write("ratio=auto;")
	write("page=\"8.5,11\";")
	dot_emit_table := table()
	ir(code)
	dot_emit_table := optimize(dot_emit_table, code.ir.start)
	dot_output(dot_emit_table)
	write("}")
end

procedure dot_File(getline, flagList)
	if match("-O", !flagList) then {
		optimize_flag := 1
	}
	every ir(add_defaults(parse(getline)))
end

procedure dot_CG()
	return code_gen(dot_emit,
			dot_globals,
			dot_invocables,
			dot_links,
			dot_function,
			dot_records,
			dot_File
			)
end
