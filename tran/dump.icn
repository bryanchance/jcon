procedure get_names(x)
	local L

	static tab
	initial {
		tab := table()
	}
	if not (L := \tab[type(x)]) then {
		L := []
		every put(L, name(!x))
		tab[type(x)] := L
	}
	return L
end

procedure verbose(x, nm,  indent)
	local s, i, n, v, names

	s := image(x)
	if type(x) == "list" then {
		every i := 1 to *x do {
			n := "L[" || i || "]"
			v := x[i]
			s ||:= "\n" || indent || n || " = " || verbose(v, n, indent || "| ")
		}
	} else if match("record", image(x)) then {
		names := get_names(x)
		every i := 1 to *x do {
			n := names[i]
			v := x[i]
			s ||:= "\n" || indent || n || " = " || verbose(v, n, indent || "| ")
		}
	}
	return s
end

procedure dump(x, excl)
	local s, i, n, names

	if type(x) == "list" then {
		s := "["
		every i := 1 to *x do {
			s ||:= dump(x[i], excl)
			if x[i+1] then {
				s ||:= ", "
			}
		}
		s ||:= "]"
	} else if match("record", image(x)) then {
		s := type(x) || "("
		names := get_names(x)
		every i := 1 to *x do {
			n := names[i]
			if member(\excl, n ? (tab(upto('.')) & move(1) & tab(0))) then {
				s ||:= "..."
			} else {
				s ||:= dump(x[i])
			}
			if x[i+1] then {
				s ||:= ", "
			}
		}
		s ||:= ")"
	} else {
		s := image(x)
	}
	return s
end
