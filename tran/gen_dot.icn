global dot_emit_table

procedure dot_emit(label, code)
    dot_emit_table[label] := code
end

procedure dot_dump(i)
    return map(ir_dump(i), "<>", "()")
end

procedure dot_output(t)
    local label, code, lab, s, i, insn

    every label := key(t) & code := t[label] do {
        lab := image(dot_dump(label))
        writes(lab)
        writes(" [shape=record,label=")
        s := "{ <f0> "
        s ||:= dot_dump(label) || ":"
        every i := 1 to *code do {
            s ||:= " |"
            s ||:= "<f" || i || "> " || dot_dump(code[i])
        }
        s ||:= " }"
        writes(image(s))
        write("];")
        every i := 1 to *code do {
            insn := code[i]
            case type(insn) of {
            "irMove" : {
                if type(\insn.lhs) == "irTmpLabel" then {
                    write(image(dot_dump(insn.lhs)),
                          "->",
                          image(dot_dump(insn.rhs)))
                }
                }
            "irGoto" : {
                write(lab, ":f", i, " ->", image(dot_dump(insn.location)))
                }
            "irField" |
            "irOpFunction" |
            "irResume" : {
                write(lab, ":f", i,
                      " ->",
                      image(dot_dump(\insn.failLabel)), " [label=failure]")
                }
            "irSucceed" : {
                write(lab, ":f", i,
                      " ->",
                      image(dot_dump(\insn.continuation)),
                      " [label=continuation]")
                }
            "irCoRet" : {
                write(lab, ":f", i,
                      " ->",
                      image(dot_dump(insn.continuation)),
                      " [label=continuation]")
                }
            "irEnterInit" : {
                write(lab, ":f", i,
                      " ->",
                      image(dot_dump(insn.startlabel)),
                      " [label=start]")
                }
            }
        }
    }
end

procedure dot_function(name, params, accumulate, locals, statics, code,
		       codestart, coord)
    local i

    write("digraph ", name, " {")
    write("ratio=auto;")
    write("page=\"8.5,11\";")
    dot_emit_table := table()
    every i := !code do {
	dot_emit_table[i.label] := i.insnList
    }
    dot_emit_table := optimize(dot_emit_table, codestart)
    dot_output(dot_emit_table)
    write("}")
end

procedure dot_File(irgen, flagList)
    local p
    if match("-O", !flagList) then {
        optimize_flag := 1
    }
    while p := @irgen do {
	case type(p) of {
	"irGlobal" : { }
	"irRecord" : { }
	"irInvocable" : { }
	"irLink" : { }
	"irFunction" : {
	    dot_function(p.name, p.paramList, p.accumulate, p.localList,
			p.staticList, p.codeList, p.codeStart)
	}
	default: runerr(1000, p)
	}
    }
end
