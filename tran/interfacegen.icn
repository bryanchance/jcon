#  interfacegen.icn -- utility to create bytecode emitter routines

procedure main()
    write("#  AUTOMATICALLY GENERATED FILE -- DO NOT EDIT!")
    operators()
    methodrefs()
    fieldrefs()
end

procedure operators()
    local o, ops, signature

    ops := [

	# arity,  op, method name,    return type

	[ 1,     "-", "Negate",       "rts.vNumeric"    ],
	[ 1,     "*", "Size",         "rts.vInteger"    ],
	[ 1,     "?", "Select",       "rts.vDescriptor" ],
	[ 1,     "!", "Bang",         "rts.vDescriptor" ],
	[ 2,    "[]", "Index",        "rts.vDescriptor" ],
	[ 3,   "[:]", "Section",      "rts.vDescriptor" ],
	[ 2,     "+", "Add",          "rts.vValue"      ],
	[ 2,     "-", "Sub",          "rts.vValue"      ],
	[ 2,     "*", "Mul",          "rts.vValue"      ],
	[ 2,     "/", "Div",          "rts.vValue"      ],
	[ 2,     "%", "Mod",          "rts.vValue"      ],
	[ 2,     "^", "Power",        "rts.vValue"      ],
	[ 2,     "<", "NLess",        "rts.vValue"      ],
	[ 2,    "<=", "NLessEq",      "rts.vValue"      ],
	[ 2,     "=", "NEqual",       "rts.vValue"      ],
	[ 2,    "~=", "NUnequal",     "rts.vValue"      ],
	[ 2,    ">=", "NGreaterEq",   "rts.vValue"      ],
	[ 2,     ">", "NGreater",     "rts.vValue"      ],
	[ 2,    "<<", "LLess",        "rts.vValue"      ],
	[ 2,   "<<=", "LLessEq",      "rts.vValue"      ],
	[ 2,    "==", "LEqual",       "rts.vValue"      ],
	[ 2,   "~==", "LUnequal",     "rts.vValue"      ],
	[ 2,   ">>=", "LGreaterEq",   "rts.vValue"      ],
	[ 2,    ">>", "LGreater",     "rts.vValue"      ],
	[ 2,    "||", "Concat",       "rts.vValue"      ],
	[ 2,   "|||", "ListConcat",   "rts.vValue"      ],
	[ 1,     "^", "Refresh",      "rts.vValue"      ],
	[ 1,     "~", "Complement",   "rts.vValue"      ],
	[ 2,    "**", "Intersect",    "rts.vValue"      ],
	[ 2,    "++", "Union",        "rts.vValue"      ],
	[ 2,    "--", "Diff",         "rts.vValue"      ],

	[ 1,     "#", "Limit",        "rts.vValue"      ],
	[ 2,    ":?", "SubjAssign",   "rts.vValue"      ],
	[ 2,   ":=:", "Swap",         "rts.vVariable"   ],
	[ 2,   "<->", "RevSwap",      "rts.vDescriptor" ],
	[ 2,    "<-", "RevAssign",    "rts.vDescriptor" ],
	[ 2,    ":=", "Assign",       "rts.vVariable"   ],
	[ 3,   "...", "ToBy",         "rts.vDescriptor" ],
	[ 3,  "[+:]", "SectPlus",     "rts.vValue"      ],
	[ 3,  "[-:]", "SectMinus",    "rts.vValue"      ],
	[ 1,     ".", "Deref",        "rts.vValue"      ],
	[ 1,     "/", "IsNull",       "rts.vDescriptor" ],
	[ 1,    "\\", "IsntNull",     "rts.vDescriptor" ],
	[ 1,     "+", "Numerate",     "rts.vNumeric"    ],
	[ 2,     "&", "Conjunction",  "rts.vDescriptor" ],
	[ 2,   "===", "VEqual",       "rts.vValue"      ],
	[ 2,  "~===", "VUnequal",     "rts.vValue"      ],
	[ 1,     "=", "TabMatch",     "rts.vString"     ],
	[ 2,     "@", "Activate",     "rts.vValue"      ],
	[ 2,     "!", "ProcessArgs",  "rts.vDescriptor" ]
    ]

    write("procedure bc_op_methodref(c, name, arity)")
    every o := !ops do {
	signature := "("
	every 1 to o[1]-1 do {
	    signature ||:= "Lrts/vDescriptor;"
	}
	signature ||:= ")"
	signature ||:= "L" || map(o[4], ".", "/") || ";"
	write("\tif ",
	      "arity = ", o[1], " & ",
	      "name == ", image(o[2]), " then ",
	      "return j_create_methodref(c, ",
	      image(o[3]), ", ",
	      image(signature), ", ",
	      image("rts/vDescriptor"), ")"
	      )
    }
    write("\trunerr(500, name || arity)")
    write("end")
end

procedure methodrefs()
    local m, def

    m := [
            ["<init>", "()V", &null, "init"],
            ["ArgArray", "(I)[Lrts/vDescriptor;", "rts/iClosure"],
            ["Assign", "(Lrts/vValue;)Lrts/vVariable;", "rts/vDescriptor"],
            ["Free", "()V", "rts/iClosure"],
            ["Instantiate",
            "(Lrts/vDescriptor;[Lrts/vDescriptor;Lrts/iClosure;)Lrts/iClosure;",
            "rts/iInterface"],
            ["New", "()Lrts/vNull;", "rts/vNull", "New_vNull"],
            ["New", "(J)Lrts/vInteger;", "rts/vInteger", "New_vInteger"],
            ["New", "(Ljava/lang/String;)Lrts/vCset;", "rts/vCset","New_vCset"],
            ["New", "(Ljava/lang/String;)Lrts/vReal;", "rts/vReal","New_vReal"],
            ["New", "(Ljava/lang/String;)Lrts/vSimpleVar;", "rts/vSimpleVar",
             "New_vSimpleVar"],
            ["New", "(Ljava/lang/String;)Lrts/vString;", "rts/vString",
             "New_vString"],
            ["New", "([Lrts/vDescriptor;)Lrts/vList;", "rts/vList",
             "New_vList"],
            ["cofail", "()V", "rts/vCoexp"],
            ["copy", "(I)Lrts/iClosure;", &null],
            ["coret", "(Lrts/vDescriptor;)V", "rts/vCoexp"],
            ["create", "(Lrts/iClosure;)Lrts/vCoexp;", "rts/iCoexp","a_Create"],
            ["createVars", "()V", &null],
            ["declareGlobal", "(Ljava/lang/String;)V", "rts/iEnv"],
            ["declareInvoke", "(Ljava/lang/String;)V", "rts/iEnv"],
            ["declareInvokeAll", "()V", "rts/iEnv"],
            ["declareNoErrorConversion", "()V", "rts/iEnv"],
            ["declareProcedure", "(Ljava/lang/String;Ljava/lang/String;I)V",
             "rts/iEnv"],
            ["declareRecord", "(Ljava/lang/String;[Ljava/lang/String;)V",
             "rts/iEnv"],
            ["deref", "()Lrts/vValue;", "rts/vDescriptor"],
            ["Field", "(Ljava.lang.String;)Lrts/vVariable;", "rts/vDescriptor"],
            ["error", "(I)V", "rts/iRuntime"],
            ["link", "(Ljava/lang/String;)V", "rts/iInterface"],
            ["marshal", "([Lrts/vDescriptor;I)Lrts/vList;", "rts/iInterface"],
            ["resolve", "(Ljava/lang/String;)Lrts/vVariable;", "rts/iEnv"],
            ["resolveKey", "(Ljava/lang/String;)Lrts/vDescriptor;", "rts/iEnv"],
            ["resolveProc", "(Ljava/lang/String;I)Lrts/vDescriptor;",
             "rts/iEnv"],
            ["resume", "()Lrts/vDescriptor;", "rts/iClosure"],
            ["resume", "()Lrts/vDescriptor;", "rts/vDescriptor", "resumeValue"],
            ["nextval", "()Lrts/vDescriptor;", "rts/iClosure"],
            ["undeclared", "(Ljava/lang/String;)V", "rts/iEnv"]
        ]
    def := [ "name", "type", "class" ]
    every gen_procedure(!m, def, "methodref")
end

procedure fieldrefs()
    local f, def

    f := [
        [ "PC", "I", "rts/iClosure"],
        [ "arguments", "[Lrts/vDescriptor;", "rts/iClosure"],
        [ "cur_coexp", "Lrts/vCoexp;", "rts/iEnv"],
        [ "file", "Ljava/lang/String;", "rts/iClosure"],
        [ "line", "I", "rts/iClosure"],
        [ "names", "[Ljava/lang/String;", "rts/iClosure"],
        [ "variables", "[Lrts/vVariable;", "rts/iClosure"]
    ]
    def := [ "name", "type", "class" ]
    every gen_procedure(!f, def, "fieldref")
end

procedure gen_procedure(i, def, suffix)
    writes("procedure bc_", i[4] | i[1], "_", suffix, "(c")
    if /i[2] then writes(", ", def[2])
    if /i[3] then writes(", ", def[3])
    write(")")
    write("    return j_create_", suffix, "(c, ",
                          image(\i[1]) | def[1], ", ",
                          image(\i[2]) | def[2], ", ",
                          image(\i[3]) | def[3], ")")
    write("end")
end
