#  interfacegen.icn -- utility to create bytecode emitter routines

procedure main()
    write("#  AUTOMATICALLY GENERATED FILE -- DO NOT EDIT!")
    keywords()
    operators()
    methodrefs()
    methods()
    fieldrefs()
end

procedure keywords()
    local keys, t, i

    keys := [
	# field, type, [name]		(name defaults to field if not present)
	[ "allocated", "Lrts/kZeroes;" ],
	[ "ascii", "Lrts/kValue;" ],
	[ "clock", "Lrts/vProc;" ],
	[ "col", "Lrts/kPaired;" ],
	[ "collections", "Lrts/kZeroes;" ],
	[ "control", "Lrts/kValue;" ],
	[ "cset", "Lrts/kValue;" ],
	[ "current", "Lrts/kValue;" ],
	[ "date", "Lrts/vProc;" ],
	[ "dateline", "Lrts/vProc;" ],
	[ "digits", "Lrts/kValue;" ],
	[ "dump", "Lrts/kCounter;" ],
	[ "e", "Lrts/kValue;" ],
	[ "error", "Lrts/kCounter;" ],
	[ "errornumber", "Lrts/kValue;" ],
	[ "errortext", "Lrts/kValue;" ],
	[ "errorvalue", "Lrts/kValue;" ],
	[ "errout", "Lrts/kValue;" ],
	[ "fail", "Lrts/kValue;" ],
	[ "features", "Lrts/vProc;" ],
	[ "host", "Lrts/vProc;" ],
	[ "input", "Lrts/kValue;" ],
	[ "interval", "Lrts/kValue;" ],
	[ "lcase", "Lrts/kValue;" ],
	[ "ldrag", "Lrts/kValue;" ],
	[ "letters", "Lrts/kValue;" ],
	[ "level", "Lrts/vProc;" ],
	[ "lpress", "Lrts/kValue;" ],
	[ "lrelease", "Lrts/kValue;" ],
	[ "main", "Lrts/kValue;" ],
	[ "mdrag", "Lrts/kValue;" ],
	[ "meta", "Lrts/kValue;" ],
	[ "mpress", "Lrts/kValue;" ],
	[ "mrelease", "Lrts/kValue;" ],
	[ "nulll", "Lrts/kValue;", "null" ],	# note third element
	[ "output", "Lrts/kValue;" ],
	[ "phi", "Lrts/kValue;" ],
	[ "pi", "Lrts/kValue;" ],
	[ "pos", "Lrts/k$pos;" ],
	[ "progname", "Lrts/kValue;" ],
	[ "random", "Lrts/k$random;" ],
	[ "rdrag", "Lrts/kValue;" ],
	[ "regions", "Lrts/kZeroes;" ],
	[ "resize", "Lrts/kValue;" ],
	[ "row", "Lrts/kPaired;" ],
	[ "rpress", "Lrts/kValue;" ],
	[ "rrelease", "Lrts/kValue;" ],
	[ "shift", "Lrts/kValue;" ],
	[ "source", "Lrts/vProc;" ],
	[ "storage", "Lrts/kZeroes;" ],
	[ "subject", "Lrts/k$subject;" ],
	[ "time", "Lrts/k$time;" ],
	[ "trace", "Lrts/kCounter;" ],
	[ "ucase", "Lrts/kValue;" ],
	[ "version", "Lrts/kValue;" ],
	[ "window", "Lrts/k$window;" ],
	[ "x", "Lrts/kPaired;" ],
	[ "y", "Lrts/kPaired;" ],
    ]
    write("procedure bc_keywords(name)")
    write("\tstatic t")
    write("\tinitial {")
    write("\t\tt := table()")
    every i := \!keys do {
	write("\t\tt[", image(\i[3]|i[1]), "] := [ ", image(i[1]), ", ", image(i[2]), "]")
    }
    write("\t}")
    write("\treturn t[name]")
    write("end")
end

procedure operators()
    local o, ops, signature

    ops := [

	# arity,  op, method name,    return type

	[ 1,     ".", "Deref",        "rts.vValue"      ],
	[ 2,    ":=", "Assign",       "rts.vVariable"   ],
	[ 2,   ":=:", "Swap",         "rts.vVariable"   ],
	[ 2,    ":?", "SubjAssign",   "rts.vVariable"   ],
	[ 2,    "<-", "RevAssign",    "rts.vDescriptor" ],
	[ 2,   "<->", "RevSwap",      "rts.vDescriptor" ],

	[ 1,     "#", "Limit",        "rts.vInteger"    ],
	[ 2,     "&", "Conjunction",  "rts.vDescriptor" ],
	[ 2,     "!", "ProcessArgs",  "rts.vDescriptor" ],
	[ 2,     "@", "Activate",     "rts.vDescriptor" ],
	[ 3,   "...", "ToBy",         "rts.vDescriptor" ],

	[ 1,     "+", "Numerate",     "rts.vNumeric"    ],
	[ 1,     "-", "Negate",       "rts.vNumeric"    ],
	[ 1,     "*", "Size",         "rts.vInteger"    ],
	[ 1,     "~", "Complement",   "rts.vValue"      ],
	[ 1,     "^", "Refresh",      "rts.vCoexp"      ],
	[ 1,     "=", "TabMatch",     "rts.vDescriptor" ],

	[ 1,     "/", "IsNull",       "rts.vDescriptor" ],
	[ 1,    "\\", "IsntNull",     "rts.vDescriptor" ],

	[ 1,     "?", "Select",       "rts.vDescriptor", ["Val", "rts.vValue"] ],
	[ 1,     "!", "Bang",         "rts.vDescriptor", ["Val", "rts.vDescriptor"] ],

	[ 2,    "[]", "Index",        "rts.vDescriptor", ["Val", "rts.vValue"] ],
	[ 3,   "[:]", "Section",      "rts.vDescriptor", ["Val", "rts.vValue"] ],
	[ 3,  "[+:]", "SectPlus",     "rts.vDescriptor", ["Val", "rts.vValue"] ],
	[ 3,  "[-:]", "SectMinus",    "rts.vDescriptor", ["Val", "rts.vValue"] ],

	[ 2,     "+", "Add",          "rts.vNumeric"    ],
	[ 2,     "-", "Sub",          "rts.vNumeric"    ],
	[ 2,     "*", "Mul",          "rts.vNumeric"    ],
	[ 2,     "/", "Div",          "rts.vNumeric"    ],
	[ 2,     "%", "Mod",          "rts.vNumeric"    ],
	[ 2,     "^", "Power",        "rts.vNumeric"    ],

	[ 2,     "<", "NLess",        "rts.vNumeric"    ],
	[ 2,    "<=", "NLessEq",      "rts.vNumeric"    ],
	[ 2,     "=", "NEqual",       "rts.vNumeric"    ],
	[ 2,    "~=", "NUnequal",     "rts.vNumeric"    ],
	[ 2,    ">=", "NGreaterEq",   "rts.vNumeric"    ],
	[ 2,     ">", "NGreater",     "rts.vNumeric"    ],

	[ 2,    "<<", "LLess",        "rts.vString"     ],
	[ 2,   "<<=", "LLessEq",      "rts.vString"     ],
	[ 2,    "==", "LEqual",       "rts.vString"     ],
	[ 2,   "~==", "LUnequal",     "rts.vString"     ],
	[ 2,   ">>=", "LGreaterEq",   "rts.vString"     ],
	[ 2,    ">>", "LGreater",     "rts.vString"     ],

	[ 2,   "===", "VEqual",       "rts.vValue"      ],
	[ 2,  "~===", "VUnequal",     "rts.vValue"      ],

	[ 2,    "||", "Concat",       "rts.vString"     ],
	[ 2,   "|||", "ListConcat",   "rts.vList"       ],

	[ 2,    "**", "Intersect",    "rts.vValue"      ],
	[ 2,    "++", "Union",        "rts.vValue"      ],
	[ 2,    "--", "Diff",         "rts.vValue"      ]
    ]

    op_methodrefs(ops, "op_methodref", "", "rts/vDescriptor")
    op_methodrefs(ops, "trampoline_op_methodref",
                       "Ljava/lang/String;ILrts/vDescriptor;",
		       "rts/iTrampoline")
end

procedure op_methodrefs(ops, fn, prefix, ty)
    local o

    write("procedure bc_", fn, "(c, name, arity, rval)")
    every o := !ops do {
	op_select(o, prefix, ty)
    }
    write("\trunerr(500, name || arity)")
    write("end")
end

procedure op_select(o, prefix, ty)
    local signature

	writes("\tif ",
	      "arity = ", o[1], " & ",
	      "name == ", image(o[2]),
	      " then return ")
        if \o[5] then {
	    signature := "(" || prefix
	    every 1 to o[1]-1 do {
	        signature ||:= "Lrts/vDescriptor;"
	    }
	    signature ||:= ")"
	    signature ||:= "L" || map(o[5][2], ".", "/") || ";"
	    writes("if \\rval then ")
	    writes("j_create_methodref(c, ",
	           image(o[3] || o[5][1]), ", ",
	           image(signature), ", ",
	           image(ty), ")"
	           )
	    writes(" else ")
	}
	signature := "(" || prefix
	every 1 to o[1]-1 do {
	    signature ||:= "Lrts/vDescriptor;"
	}
	signature ||:= ")"
	signature ||:= "L" || map(o[4], ".", "/") || ";"
	writes("j_create_methodref(c, ",
	       image(o[3]), ", ",
	       image(signature), ", ",
	       image(ty), ")"
	       )
	write()
end

procedure methodrefs()
    local m, def, i, args

    m := [
            ["<init>", "()V", &null, "init"],
            ["<init>", "([Lrts/vDescriptor;)V", &null, "initV"],
            ["<init>", "([Lrts/vDescriptor;I)V", &null, "initVI"],
            ["Assign", "(Lrts/vDescriptor;)Lrts/vVariable;", "rts/vDescriptor"],
            ["Call", "([Lrts/vDescriptor;)Lrts/vDescriptor;",
             "rts/vDescriptor",  "CallV"],
            ["New", "()Lrts/vNull;", "rts/vNull", "New_vNull"],
            ["New", "(J)Lrts/vInteger;", "rts/vInteger",
	     "New_vInteger"],
            ["New", "(Ljava/lang/String;)Lrts/vBigInt;", "rts/vBigInt",
	     "New_vBigInt"],
            ["New", "(Lrts/vClosure;)Lrts/vCoexp;", "rts/vCoexp", "New_vCoexp"],
            ["New", "(Ljava/lang/String;)Lrts/vCset;", "rts/vCset","New_vCset"],
            ["New", "(Ljava/lang/String;)Lrts/vReal;", "rts/vReal","New_vReal"],
            ["New", "(Ljava/lang/String;Lrts/vDescriptor;)Lrts/vSimpleVar;",
             "rts/vSimpleVar", "New_vSimpleVar_Assign"],
            ["New", "(Ljava/lang/String;)Lrts/vSimpleVar;", "rts/vSimpleVar",
             "New_vSimpleVar"],
            ["NewLocalUnstacked","(Ljava/lang/String;Lrts/vDescriptor;)Lrts/vLocalVar;",
             "rts/vLocalVar", "New_Local_Assign_Unstacked"],
            ["NewLocal","(Ljava/lang/String;Lrts/vDescriptor;)Lrts/vLocalVar;",
             "rts/vLocalVar", "New_Local_Assign"],
            ["NewLocal", "(Ljava/lang/String;)Lrts/vLocalVar;",
	     "rts/vLocalVar", "New_Local"],
            ["New", "(Ljava/lang/String;)Lrts/vString;", "rts/vString",
             "New_vString"],
            ["New", "([Lrts/vDescriptor;)Lrts/vList;", "rts/vList",
             "New_vList"],
            ["Free", "(Lrts/vLocalVar;)V", "rts/vLocalVar"],
            ["cofail", "()V", "rts/vCoexp"],
            ["copy", "(I)Lrts/vClosure;", &null],
            ["coret", "(Lrts/vDescriptor;)V", "rts/vCoexp"],
            ["create", "()V", "rts/vCoexp"],
            ["createVars", "()V", &null],
            ["declareDebugging", "()V", "rts/iEnv"],
            ["declareGlobal", "(Ljava/lang/String;)V", "rts/iEnv"],
            ["declareInvoke", "(Ljava/lang/String;)V", "rts/iEnv"],
            ["declareInvokeAll", "()V", "rts/iEnv"],
            ["declareNoErrorConversion", "()V", "rts/iEnv"],
            ["declareProcedure", "(Ljava/lang/String;Lrts/vProc;I)V",
             "rts/iEnv"],
            ["declareRecord", "(Ljava/lang/String;[Ljava/lang/String;)V",
             "rts/iEnv"],
            ["Deref", "()Lrts/vValue;", "rts/vDescriptor"],
            ["DerefLocal", "()Lrts/vDescriptor;", "rts/vDescriptor"],
            ["Field", "(Ljava/lang/String;)Lrts/vVariable;", "rts/vDescriptor"],
            ["Field", "(Ljava/lang/String;ILrts/vDescriptor;Ljava/lang/String;)Lrts/vVariable;", "rts/iTrampoline", "trampoline_Field"],
            ["error", "(I)V", "rts/iRuntime"],
            ["link", "(Lrts/iFile;Ljava/lang/String;)V", "rts/iInterface"],
            ["marshal", "([Lrts/vDescriptor;I)Lrts/vList;", "rts/iInterface"],
            ["propagate", "(Ljava/lang/String;[Lrts/vDescriptor;)V", "rts/iError"],
            ["resolve", "(Ljava/lang/String;)Lrts/vVariable;", "rts/iEnv"],
            ["resolveKey", "(Ljava/lang/String;)Lrts/vProc;", "rts/iEnv"],
            ["resolveProc", "(Ljava/lang/String;I)Lrts/vDescriptor;",
             "rts/iEnv"],
            ["Resume", "()Lrts/vDescriptor;", "rts/vDescriptor"],
            ["Resume", "(Ljava/lang/String;ILrts/vDescriptor;)Lrts/vDescriptor;", "rts/iTrampoline", "trampoline_Resume"],
            ["undeclared", "(Ljava/lang/String;)V", "rts/iEnv"],
            ["undeclared", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", "rts/iEnv", "announce_undeclared"]
        ]
    def := [ "name", "type", "class" ]
    every gen_procedure(!m, def, "methodref")

    write("procedure bc_CallN_methodref(c, N)")
    write("\treturn case N of {")
    args := ""
    every i := 0 to 9 do {
        write("\t", i, ": j_create_methodref(c, \"Call\", \"(", args,
              ")Lrts/vDescriptor;\", \"rts/vDescriptor\")")
        args ||:= "Lrts/vDescriptor;"
    }
    write("\tdefault : runerr(500, N)")
    write("\t}")
    write("end")

    write("procedure bc_trampoline_CallN_methodref(c, N)")
    write("\treturn case N of {")
    args := ""
    every i := 0 to 9 do {
        write("\t", i, ": j_create_methodref(c, \"Call\", \"(Ljava/lang/String;ILrts/vDescriptor;", args,
              ")Lrts/vDescriptor;\", \"rts/iTrampoline\")")
        args ||:= "Lrts/vDescriptor;"
    }
    write("\tdefault : j_create_methodref(c, \"Call\", \"(Ljava/lang/String;ILrts/vDescriptor;[Lrts/vDescriptor;)Lrts/vDescriptor;\", \"rts/iTrampoline\")")
    write("\t}")
    write("end")

    write("procedure bc_initN_methodref(c, classname, N)")
    write("\treturn case N of {")
    args := ""
    every i := 0 to 9 do {
        write("\t", i, ": j_create_methodref(c, \"<init>\", \"(", args,
              ")V\", classname)")
        args ||:= "Lrts/vDescriptor;"
    }
    write("\tdefault : runerr(500, N)")
    write("\t}")
    write("end")
end

procedure methods()
    local i

    write("procedure bc_CallN_method(c, N)")
    write("\treturn case N of {")
    args := ""
    every i := 0 to 9 do {
        write("\t", i, ": j_create_method(c, 0, \"Call\", \"(", args,
              ")Lrts/vDescriptor;\")")
        args ||:= "Lrts/vDescriptor;"
    }
    write("\tdefault : runerr(500, N)")
    write("\t}")
    write("end")

    write("procedure bc_initN_method(c, N)")
    write("\treturn case N of {")
    args := ""
    every i := 0 to 9 do {
        write("\t", i, ": j_create_method(c, 0, \"<init>\", \"(", args,
              ")V\")")
        args ||:= "Lrts/vDescriptor;"
    }
    write("\tdefault : runerr(500, N)")
    write("\t}")
    write("end")
end

procedure fieldrefs()
    local f, def

    f := [
        [ "PC", "I", &null],
        [ "arguments", "[Lrts/vDescriptor;", "rts/vClosure"],
        [ "retval", "Lrts/vDescriptor;", "rts/vClosure"],
        [ "refreshArray", "[Lrts/vDescriptor;", &null],
        [ "refreshPC", "I", &null],
        [ "cur_coexp", "Lrts/vCoexp;", "rts/iEnv"],
        [ "file", "Ljava/lang/String;", "rts/iTrace"],
        [ "line", "I", "rts/iTrace"]
    ]
    def := [ "name", "type", "class" ]
    every gen_procedure(!f, def, "fieldref")
end

procedure gen_procedure(i, def, suffix)
    writes("procedure bc_", i[4] | i[1], "_", suffix, "(c")
    if /i[2] then writes(", ", def[2])
    if /i[3] then writes(", ", def[3])
    write(")")
    write("    return j_create_", suffix, "(c, ",
                          image(\i[1]) | def[1], ", ",
                          image(\i[2]) | def[2], ", ",
                          image(\i[3]) | def[3], ")")
    write("end")
end
