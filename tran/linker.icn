# linker outputclassname inputclassname*

procedure main(L)
    local init, initcode, m, mcode, constructor
    local outclass, i, atype, start, f, c

    outclass := pop(L) | stop("missing output class name")

    f := open(outclass || ".class", "w")
    c := j_ClassFile(3, 45, [&null], table(), 1,
        &null,
        &null,
        [],[],[],[]
        )
    c.super_class := j_cp_Class(c, j_cp_Utf8(c, "java/lang/Object"))
    c.this_class := j_cp_Class(c, j_cp_Utf8(c, outclass))

    init := j_create_method(c, 1, "<init>", "()V")
    initcode := j_create_code(c, 2, 2)
    put(init.attributes, initcode)
    put(initcode.code, j_aload_0())
    constructor := j_create_methodref(c, "<init>", "()V", "java/lang/Object")
    put(initcode.code, j_invokenonvirtual(constructor))
    put(initcode.code, j_vreturn())

    m := j_create_method(c, 9, "main", "([Ljava/lang/String;)V")
    mcode := j_create_code(c, 10, 10)
    put(m.attributes, mcode)

    put(mcode.code, j_ipush(*L) )
    atype := j_cp_Class(c, j_cp_Utf8(c, "java/lang/String"))
    put(mcode.code, j_anewarray(atype) )
    every i := 1 to *L do {
        put(mcode.code, j_dup() )
        put(mcode.code, j_ipush(i-1) )
        put(mcode.code, j_ldc(j_cp_String(c, j_cp_Utf8(c, L[i]))) )
        put(mcode.code, j_aastore() )
    }
    put(mcode.code, j_aload_0() )
    put(mcode.code, j_ldc(j_cp_String(c, j_cp_Utf8(c, outclass))) )

    start := j_create_methodref(c,
	 "start", "([Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)V",
	 "rts/iInterface")
    put(mcode.code, j_invokestatic(start) )
    put(mcode.code, j_vreturn() )

    j_writer_j_ClassFile(f, c)
end
